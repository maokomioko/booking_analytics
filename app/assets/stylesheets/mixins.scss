$prefixes: -webkit-, -moz-, -o-, "";

@mixin borderRadius($size...) {
  @if length($size) == 1 {
    @each $prefix in $prefixes {
      #{$prefix}border-radius: $size;
    }
  }
  @else {
    @include customBorderRadius($size...);
  }
}

@mixin customBorderRadius($topLeft: 0, $topRight: 0, $bottomRight: 0, $bottomLeft: 0) {
  @each $prefix in $prefixes {
    @if $prefix == "-moz-" {
      @if $topLeft != 0 {
        -moz-border-radius-topleft: $topLeft;
      }
      @if $topRight != 0 {
        -moz-border-radius-topright: $topRight;
      }
      @if $bottomRight != 0 {
        -moz-border-radius-bottomright: $bottomRight;
      }
      @if $bottomLeft != 0 {
        -moz-border-radius-bottomleft: $bottomLeft;
      }
    }
    @else {
      @if $topLeft != 0 {
        #{$prefix}border-top-left-radius: $topLeft;
      }
      @if $topRight != 0 {
        #{$prefix}border-top-right-radius: $topRight;
      }
      @if $bottomRight != 0 {
        #{$prefix}border-bottom-right-radius: $bottomRight;
      }
      @if $bottomLeft != 0 {
        #{$prefix}border-bottom-left-radius: $bottomLeft;
      }
    }
  }
}

@mixin flexbox-display-flex {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin declare-font-face($font-family, $font-filename, $font-weight: normal, $font-style: normal, $font-stretch: normal) {
  @font-face {
    font-family: #{$font-family};
    src: url(font-path("#{$font-filename}.eot"));
    src: url(font-path("#{$font-filename}.eot?#iefix")) format("embedded-opentype"), url(font-path("#{$font-filename}.woff")) format("woff"), url(font-path("#{$font-filename}.ttf")) format("truetype"), url(font-path("#{$font-filename}.svg##{$font-family}")) format("svg");
    font-weight: $font-weight;
    font-style: $font-style;
    font-stretch: $font-stretch;
    text-rendering: optimizeLegibility;
  }
}

$action: rgb(64, 170, 61);

$black: rgb(0, 0, 0);
$black_10: rgba(0, 0, 0, 0.1);
$black_13: rgba(0, 0, 0, 0.13);
$black_20: rgba(0, 0, 0, 0.2);
$black_30: rgba(0, 0, 0, 0.3);
$black_50: rgba(0, 0, 0, 0.5);
$black_60: rgba(0, 0, 0, 0.6);
$black_70: rgba(0, 0, 0, 0.7);
$black_80: rgba(0, 0, 0, 0.8);
$black_90: rgba(0, 0, 0, 0.9);
$white_10: rgba(255, 255, 255, 0.1);
$white_80: rgba(255, 255, 255, 0.8);
$white: rgb(255, 255, 255);
$white_10: rgba(255, 255, 255, 0.1);
$white_20: rgba(255, 255, 255, 0.2);

$red: rgb(250, 0, 0);
$red_focus: rgb(255, 220, 220);

$primary: rgb(0, 158, 226);

$danger: rgb(226, 6, 19);
$default_text: rgb(65, 65, 65);
$default_text_o10: rgba(65, 65, 65, 0.1);
